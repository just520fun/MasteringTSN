1.Hardware
IPC with I210
Technically, all computers and/or devices with I210 are OK for this prototype. So far, IPC purchased from China Taobao https://m.tb.cn/h.eFoRval?sm=939094 with I210 customization is verified. You are encouraged to try on any of your platform witch supports TSN.


2.Software
Ubuntu 18.04 
For details, please visit https://ubuntu.com/download/desktop
Technically, all version kernel > 4.19 are OK for this prototype. So far, this prototype is only verified based on Ubuntu 18.04. You are encouraged to try on your faviourate distro and kernel version with your community.

Actually new version of drivers is installed by default with Ubuntu 18.04.3, you DONOT need install old version unless you want to modify the driver source code accoring to your project.
Remember, always type:
  sudo apt update
  sudo apt upgrade
with choosing the right Ubuntu server at Software Update-> Setting before install other software.


3.Intel I210 Driver:
Intel® Ethernet Controller I210 datasheet
https://www.intel.com/content/dam/www/public/us/en/documents/datasheets/i210-ethernet-controller-datasheet.pdf

Download
https://downloadcenter.intel.com/download/13663/Intel-Network-Adapter-Driver-for-82575-6-82580-I350-and-I210-211-Based-Gigabit-Network-Connections-for-Linux-?product=68668

igb Linux* Base Driver for Intel(R) Ethernet Network Connection:
https://downloadmirror.intel.com/13663/eng/readme.txt all rights are asked to follow Intel licensed in this package. 

Overview
========
This driver supports kernel versions 2.6.30 or newer.

Driver information can be obtained using ethtool, lspci, and ifconfig.
Instructions on updating ethtool can be found in the section Additional
Configurations later in this document.
This driver is only supported as a loadable module at this time. Intel is not
supplying patches against the kernel source to allow for static linking of the
drivers.

For questions related to hardware requirements, refer to the documentation
supplied with your Intel adapter. All hardware requirements listed apply to use
with Linux.

The driver information previously displayed in the /proc file system is not
supported in this release.

The igb driver supports IEEE 1588 time stamping for kernels 2.6.30 and newer.

The igb driver supports 2.5 Gbps operating speed on 2500BASE-KX only for
I354-based network connections.

This driver no longer supports Itanium(R)-based systems.


Identifying Your Adapter
========================
For information on how to identify your adapter, and for the latest Intel
network drivers, refer to the Intel Support website:
http://www.intel.com/support


Building and Installation
=========================
To build a binary RPM* package of this driver, run 'rpmbuild -tb
igb-<x.x.x>.tar.gz', where <x.x.x> is the version number for the driver tar
file.

Note: For the build to work properly, the currently running kernel MUST match
the version and configuration of the installed kernel sources. If you have just
recompiled the kernel reboot the system before building.

- To compile the driver on some kernel/arch combinations, a package with the
development version of libelf (e.g. libelf-dev, libelf-devel,
elfutilsl-libelf-devel) may need to be installed.

Note: RPM functionality has only been tested in Red Hat distributions.


1. Move the base driver tar file to the directory of your choice. For
   example, use '/home/username/igb' or '/usr/local/src/igb'.

2. Untar/unzip the archive, where <x.x.x> is the version number for the
   driver tar file:
   tar zxf igb-<x.x.x>.tar.gz

3. Change to the driver src directory, where <x.x.x> is the version number
   for the driver tar:
   cd igb-<x.x.x>/src/

4. Compile the driver module:
   # make install
   The binary will be installed as:
   /lib/modules/<KERNEL VERSION>/updates/drivers/net/ethernet/intel/igb/igb.ko

   The install location listed above is the default location. This may differ
   for various Linux distributions.

5. Load the module using the modprobe command:
   modprobe <igb> [parameter=port1_value,port2_value]

   Make sure that any older igb drivers are removed from the kernel before
   loading the new module:
   rmmod igb; modprobe igb

6. Assign an IP address to the interface by entering the following,
   where ethX is the interface name that was shown in dmesg after modprobe:
  
   ip address add <IP_address>/<netmask bits> dev ethX

7. Verify that the interface works. Enter the following, where IP_address
   is the IP address for another machine on the same subnet as the interface
   that is being tested:
   ping <IP_address>

To build igb driver with DCA
----------------------------
If your kernel supports DCA, the driver will build by default with DCA enabled.

Note: For certain distributions like (but not limited to) RedHat Enterprise
Linux 7 and Ubuntu, once the driver is installed the initrd/initramfs file may
need to be updated to prevent the OS loading old versions of the igb driver.
The dracut utility may be used on RedHat distributions:
	# dracut --force
   For Ubuntu:
	# update-initramfs -u


4.Linux PREEMPT-RT Kernel installation
Preempt-RT Reference articls:
https://rt.wiki.kernel.org/index.php/RT_PREEMPT_HOWTO
https://stackoverflow.com/questions/26311757/what-is-rt-preempt-how-is-it-different-from-preempt-rt-does-these-mean-same-re

(Chinese)Linux硬实时和Preempt-RT补丁(中断、软中断、调度、内存与调试) 
  http://news.eeworld.com.cn/mp/ymc/a52869.jspxubuntu安装实时RT-PREEMPT内核补丁
  https://blog.csdn.net/uanjj/article/details/88830668
  https://blog.csdn.net/x356982611/article/details/77370385

Since Unbuntu 18.04.3 is using 5.0.0.3 version, the nearest RT version is 5.0.21 with 5.0.21-rt16:
kernel download: 
http://www.kernel.org/pub/linux/kernel/v5.x
https://www.kernel.org/pub/linux/kernel/projects/rt/5.0

China Mirror:
https://mirrors.tuna.tsinghua.edu.cn/kernel/v5.x
https://mirrors.tuna.tsinghua.edu.cn/kernel/projects/rt/5.0/


building linuxcnc-dev on ubuntu 16.04 preempt-rt kernel was created by thang
https://forum.linuxcnc.org/9-installing-linuxcnc/33521-building-linuxcnc-dev-on-ubuntu-16-04-preempt-rt-kernel

This tutorial about how to install preempt-rt kernel on ubuntu 18.04. 

+ install some require packages
sudo apt-get install libssl-dev quilt flex bison libncurses-dev elfutils openssh-server build-essential libnuma-dev bc libssl-dev libelf-dev -y
sudo apt-get install libmbedtls-dev python-six cmake git sudo net-tools vlan ethtool tcpdump -y

+ download kernel and patch
cd ~/Downloads
wget https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.0.21.tar.gz
wget https://mirrors.edge.kernel.org/pub/linux/kernel/projects/rt/5.0/patch-5.0.21-rt16.patch.gz

tar -xzvf linux-5.0.21.tar.gz
tar -xzvf patch-5.0.21-rt16.patch.gz

+ patch kernel
cd linux-5.0.21
patch -p1 < ../patch-5.0.21-rt16.patch --verbose

+ config kernel
（if you want to duplicate all local mod/drivers which are already used, at first time you can use
    make localmodconfig ）
make menuconfig

+ The menuconfig appear
select Processor type and features -> Preemption Model -> Fully Preemptible Kernel (RT) -> back to top menu

use "/" to search vlan, and config all vlan feature one by one
select Network configuation -> General option -> 802.1q , and VLAN manipulation, and so on

select Memory Debugging --> Check for stack overflows ( already deselect so dont select this -just check)
save and exit

+ compile and install kernel
make -j8 ( if you have a cpu 8 core)
sudo make modules_install -j8
sudo make install -j8

+check new kernel
cd /boot
ls
you will see somethings like initrd.img-5.0.21-rt16, vmlinuz-5.0.21-rt16, and config-5.0.21-rt16

+check kernel
reboot 
check kernel by : uname -r or uname -a


5.iproute2 installation
Since we will use tc qdisc for traffic control in TSN, we would like to introduct all lastest tc qdisc for prototyping, which including ETF MQPRIO and TAPRIO.
All these lastest tc qdisc is not installed by Ubuntu distro and PREEMPT-RT kernel and mod, so lastest iproute2 is asked to install.
*Caution: "sudo apt install iproute2" does not work properly, cause the iproute2 installed is not the lastest suitable modules.

+download iproute2
wget https://www.kernel.org/pub/linux/utils/net/iproute2/iproute2-5.0.0.tar.gz
tar -xzvf iproute2-5.0.0.tar.gzz

+compile iproute2
cd iproute2-5.0.0/
make all

+install iproute2
sudo make install

+check the tc qdisc is well installed
tc qdisc add etf help
tc qdisc add taprio help
tc qdisc add mqprio help

+check vlan
vconfig <interface> <vlanid>

So far everything is well prepared, let's move on.
